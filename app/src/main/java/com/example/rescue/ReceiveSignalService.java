package com.example.rescue;

import android.app.Notification;
import android.app.PendingIntent;
import android.app.Service;
import android.bluetooth.BluetoothSocket;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.os.Build;
import android.os.CountDownTimer;
import android.os.Handler;
import android.os.IBinder;
import android.os.Message;
import android.os.SystemClock;
import android.os.VibrationEffect;
import android.os.Vibrator;
import android.support.annotation.Nullable;
import android.support.v4.app.NotificationCompat;
import android.util.Log;
import android.util.TypedValue;

import com.google.gson.Gson;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;

import static com.example.rescue.App.CHANNEL_ID;


public class ReceiveSignalService extends Service {

    private BluetoothSocket bluetoothSocket;
    static final int STATE_MESSAGE_RECEIVED = 4;


    ///Received Strings ...
    // AT+VGS is generated by MY Earphones
    // rescue_one is generated by Rescue Device
    ArrayList<String> messages = new ArrayList<>(Arrays.asList("AT+VGS", "SRVONE", "rescue_one", "_one"));

    private SQLiteDatabase database;
    private Vibrator v;


    @Override
    public void onCreate() {
        super.onCreate();


    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        final BluetoothSocket objReceived = (BluetoothSocket) ((ObjectWrapperForBinder)intent.getExtras().getBinder("inputSocket")).getData();
        bluetoothSocket = objReceived;
        Log.i("HELPER_2", bluetoothSocket.getRemoteDevice().getName());


        Intent notificationIntent = new Intent(this, AlarmActivity.class);
        PendingIntent pendingIntent = PendingIntent.getActivity(this,
                0, notificationIntent, 0);

        Notification notification = null;

        if(bluetoothSocket != null){
            notification = new NotificationCompat.Builder(this, CHANNEL_ID)
                    .setContentTitle(bluetoothSocket.getRemoteDevice().getName())
                    .setContentText(bluetoothSocket.getRemoteDevice().getAddress())
                    .setSmallIcon(R.drawable.rescuelogo)
                    .setContentIntent(pendingIntent)
                    .build();
        }else{
            notification = new NotificationCompat.Builder(this, CHANNEL_ID)
                    .setContentTitle("Rescue")
                    .setContentText("Device Not Connected")
                    .setSmallIcon(R.drawable.rescuelogo)
                    .setContentIntent(pendingIntent)
                    .build();
        }
        if(notification != null){
            startForeground(1, notification);
        }

        //do heavy work on a background thread

        if(bluetoothSocket != null){
            ReciveSignalThread reciveSignalThread = new ReciveSignalThread(bluetoothSocket);
            reciveSignalThread.start();
        }

        //stopSelf();

        return START_NOT_STICKY;
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
    }

    @Nullable
    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

    Handler handler = new Handler(new Handler.Callback() {
        @Override
        public boolean handleMessage(Message msg) {
            switch (msg.what){
                case STATE_MESSAGE_RECEIVED :

                    byte[] readBuff = (byte[])msg.obj;
                    String tempMsg = new String(readBuff, 0, msg.arg1);

                    Log.i("RECEIVED SIGNAL LOVE", "|"+tempMsg+"|");
                    for(String s: messages){
                        if(tempMsg.contains(s)){
                            Log.i("HAI", "YES");

                            startRescueSafteyActions();
                            break;
                        }
                    }




                    break;
            }
            return true;
        }
    });

    private void startRescueSafteyActions() {

        String[] str = retrieveTimesFromDB();
        if(str != null){
            if(!(str[0].matches("") || str[1].matches(""))){
                int time = Integer.parseInt(str[0]);
                int timeInMilli = time*1000;

                //Vibrate First
                vibrateFirst(timeInMilli);

                //CREATE COUNTER
                final CountDownTimer counter = new CountDownTimer(timeInMilli, 1000) {

                    public void onTick(long millisUntilFinished) { }

                    public void onFinish() {
                        //start send duration activity
                        Intent alarmIntent = new Intent(getApplicationContext(), AlarmActivity.class);
                        alarmIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                        startActivity(alarmIntent);

                    }

                };
                counter.start();

            }
        }



    }

    private String[] retrieveTimesFromDB(){
        database = openOrCreateDatabase("Rescue", Context.MODE_PRIVATE, null);
        database.execSQL("CREATE TABLE IF NOT EXISTS rescuedurations(vibrationtime varchar not null, senddurationtime varchar not null);");

        Cursor cursor = database.rawQuery("SELECT * FROM rescuedurations", null);
        try{
            int i = 0;
            if (cursor.getCount() > 0)
            {
                cursor.moveToFirst();
                String vTime = "";
                String sTime = "";
                do {
                    vTime = cursor.getString(cursor.getColumnIndex("vibrationtime"));
                    sTime = cursor.getString(cursor.getColumnIndex("senddurationtime"));


                    i++;
                } while (cursor.moveToNext());
                cursor.close();
                String[] str = {vTime, sTime};
                return str;
            }
        }catch (Exception e){
            return null;
        }
        return null;
    }

    private void vibrateFirst(int timeInMilli) {

        v = (Vibrator) getSystemService(Context.VIBRATOR_SERVICE);
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            v.vibrate(VibrationEffect.createOneShot(timeInMilli, VibrationEffect.DEFAULT_AMPLITUDE));
        } else {
            //deprecated in API 26
            v.vibrate(timeInMilli);
        }
    }

    public class ReciveSignalThread extends Thread{
        private final BluetoothSocket bluetoothSocket;
        private final InputStream inputStream;

        public ReciveSignalThread(BluetoothSocket socket){
            bluetoothSocket = socket;
            InputStream tempIn = null;

            try{
                tempIn = bluetoothSocket.getInputStream();
            } catch (IOException e) {
                e.printStackTrace();
            }

            inputStream = tempIn;

        }

        @Override
        public void run() {
            byte[] buffer = new byte[1024];
            int bytes;

            while (true){
                try{
                    bytes = inputStream.read(buffer);
                    handler.obtainMessage(STATE_MESSAGE_RECEIVED, bytes, -1, buffer).sendToTarget();


                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}
